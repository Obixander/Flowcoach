@page "/emotionpage/{id:int}"
@inject NavigationManager Navigation
@inject SignalRService Hub
@using FlowCoach.Common
@using FlowCoach.UserFrontend.Data


@if (Emotion != null) {
    <HeaderTitle Title="@Emotion.Title" BackUrl="/EmotionPanel" />
    <div id="MainContent">
        @foreach (var content in Emotion.Content)
        {
            <p>@content</p>
            <hr />
        }

        @for (int j = 0; j <= 4; j++)
        {

            <p class="Question-Intro">@Emotion.IntroText[j]</p>
            @foreach (var question in SortedQuestions[j].Take(QuestionAmount[j]))
            {

                <div class="Question-Container">
                    <div class="Question" @onclick="() => Unfold(question)">
                        <p class="Question-Text">
                            @question.QuestionText
                        </p>
                    </div>
                    @if (IsAnswerBoxVisible(question))
                    {
                        <div class="Question-AnswerBox">
                            <input class="UserInput" @bind=question.Answer />
                        </div>
                    }
                </div>
            }

            @* This somehow works *@
            <div class="LoadButtonContainer">
                @{
                    var index = j;
                }
                <i class="fa-solid fa-angle-down" style="color: #ffffff;" @onclick="() => LoadMoreQuestions(index)"></i>
            </div>

            <hr />
        }

    </div>
}
else
{
    <strong role="status" style="color: #ffffff">Loading...</strong>
}


@code 
{

    [Parameter]
    public int Id { get; set; } //this is the id that will be used to get the coaching infomation

    public Coaching Emotion { get; set; } //this will be used to store the coaching infomation

    private Dictionary<Question, bool> visibilityMap = new();

    private List<int> QuestionAmount = new() { 3, 3, 3, 3, 3 };
    private int counter = 0;

    private List<List<Question>> SortedQuestions = new();

    protected override async void OnInitialized()
    {
        // await Hub.StartConnectionAsync();
        try
        {
            Emotion = await Hub.HubConnection.InvokeAsync<Coaching>(nameof(IFlowCoachHub.GetCoachingAsyncBy), Id);        
        }
        catch
        {
            throw;
        }
        SortedQuestions.Add(new List<Question>());
        SortedQuestions.Add(new List<Question>());
        SortedQuestions.Add(new List<Question>());
        SortedQuestions.Add(new List<Question>());
        SortedQuestions.Add(new List<Question>());
        SortQuestions(Emotion.Questions);
        StateHasChanged();
    }

    private void LoadMoreQuestions(int location)
    {
        QuestionAmount[location] += 3;
        StateHasChanged();
    }


    private void SortQuestions(List<Question> toSort)
    {
        foreach (var quesiton in toSort)
        {
            switch (quesiton.QuestionType)
            {
                case QuestionType.Current:
                    SortedQuestions[0].Add(quesiton);
                    break;
                case QuestionType.Wanted:
                    SortedQuestions[1].Add(quesiton);
                    break;
                case QuestionType.Barrier:
                    SortedQuestions[2].Add(quesiton);
                    break;
                case QuestionType.Solution:
                    SortedQuestions[3].Add(quesiton);
                    break;
                case QuestionType.FutureProof:
                    SortedQuestions[4].Add(quesiton);
                    break;
            }
        }
    }

    private void Unfold(Question question)
    {
        if (visibilityMap.ContainsKey(question))
        {
            visibilityMap[question] = !visibilityMap[question];
        }
        else
        {
            visibilityMap[question] = true;
        }
    }

    private bool IsAnswerBoxVisible(Question question)
    {
        return visibilityMap.ContainsKey(question) && visibilityMap[question];
    }
}